=Intrael - Computer vision for the web=



==SYNOPSIS==

*intrael* 'OPTIONS'



==DESCRIPTION==

Intrael is a portable app server that processes depth data from a kinect
and identifies objects using several configurable selection criteria.

It is based on an algorithm for run-based component labeling described
by He, Chao, Suzuki and Itoh which provides excellent performance.

Found objects are analyzed and detailed 3D bounding boxes are measured 
for each of them. 24+ objects can be tracked at fluid frame rates.

The collected data are made available to network clients through polling
as raw delimited text or as JSON-P HTTP responses for use in browsers.

The developer just has to include a javascript on his pages to enable
the handling of the stream from the server running localy on the client.

The main site serves as a facility for the calibration of screen coords
which can then be fetched by the helper script on other domains.

==INSTALL==
=== Requirements ===

- libfreenect (All platforms) http://openkinect.org/wiki/Getting_Started

- pthreads (All platforms) Pthread-win32 for windows is available at http://http://sourceware.org/pthreads-win32/

- Cmake >= 2.6 (All platforms) http://www.cmake.org

=== Basic Compiling Instructions ===

To use CMake:

- Make a directory somewhere, like 'build' in your repo directory.
- Go into that directory
- Type cmake ..
- Run make

=== Windows platform specifics ===

You'll have to define the location of the pthreads lib and header files by hand.

*Driver installation(skip if installed with libfreenect)*

Windows 7: step-by-step walkthrough (should also work with Windows XP!)

Plug in your Kinect. Windows will warn that no device driver was found for the plugged device (the LED of Kinect will not turn on). If Windows presents a dialog asking to search for drivers, simply cancel it.

Open the Device Manager: Start >> Control Panel >> System and Security >> System >> Device Manager A device called "Xbox NUI Motor" should be somewhere there (most probably be under "Other devices") with a small yellow warning symbol "!" on top of its icon. Right click on it, and select "Update Driver Software...", then click on "Browse my computer for driver software".

"Browse" and select the folder where the "XBox_NUI_Motor.inf" is located (inf/ inside the intrael folder). Click "Next" and if warned by Windows that a non-certified driver is about to be installed, just order it to install it anyway.

After that, the Kinect LED should start blinking green. Now there will be two additional devices in the Device Manager list: "Xbox NUI Camera" and "Xbox NUI Audio". Repeat the above instructions for them as well.


==OPTIONS==

*-p* PORT_INT::
    Specifies the port of the HTTP listener (Default is 6661).

*-P* PORT_INT::
    Specifies the port of the management listener (Default is 0, disabled).

*-l* ADDRESS_STRING::
    Forces the HTTP listener to bind on the supplied address.

*-L* ADDRESS_STRING::
    Forces the management listener to bind on the supplied address.

*-k* DEVICE_INT::
    Specifies the kinect device to use if there are more than one (Default is 0).

*-K* INT::
    Specifies the mode for the rgb camera. 0-Disabled, 1-640x480, 2-1280x1024 (Default is 0).
    
*-s* SECRET_STRING::
    Specifies the secret passphrase for use in the management interface (See below).

*-S* FILE_STRING::
    Specifies a file that contains the secret passphrase (See previous option).

*-b* FILE_STRING::
    Specifies a dump file to load as the reference frame

*-o* DIR::
    Specifies the directory path where snapshots from the depth & rgb camera should be stored.

*-M* BYTES::
    Specifies the maximum packet size. The default is 3948 which keeps packets below 4k and provides for 24+ distinct objects. Increase it at your own risk for more objects.

*ALL THE FOLLOWING OPTIONS CAN ALSO BE CHANGED DURING OPERATION VIA THE MANAGEMENT INTERFACE*

*-m* INT::
    Specifies the mode of operation. If the value is -1  the depth threshold (specified by the -z,-Z options)
    refers to the reference frame and only scans objects at distances *relative to the reference frame scenery*.
    If the value is 0 everything in the depth threshold *relative to the camera* will be tracked including the
    objects that were present at the time the reference frame was taken. A positive non-zero value works like
    the zero one but all objects that were on the reference frame will not be tracked (-1 to 9999. Default 0).

*-r* INT::
    Specifies the number of frames that should be processed to create the reference frame(1-60, default 30).

*-a* INT::
    Moves the kinect motor to the specified angle.(-31 to 31, default 0).

*-A* INT::
    Toggles the polling of accelerometer values and motor state(0-1, default 0,disabled).

*-i* INT::
    Specifies the instance identifier. That's a user defined 31 bit unsigned integer that does not affect
    operation. It is usefull if one wishes to use input from several servers on the same page(default 0).

*-B*::
    Forces a reload of the dump file (if that was enabled by the -b option at the command line). 
    Needs the -r option to work if called from the management interface. It is assumed at startup.

*-O* INT::
    Forces a (synced) dump of the current depth & rgb frames (if a directory was enabled by the -o option at the command line). The files will be named <INT>.pgm and <INT>.pnm respectively. Also needs the -r option if called from the management interface. It is assumed at startup.

*-x* INT::
    Specifies the lower bound of the raster scan for the X axis(0-639, default 0).

*-X* INT::
    Specifies the upper bound of the raster scan for the X axis(0-639, default 0).

*-y* INT::
    Specifies the lower bound of the raster scan for the Y axis(0-479, default 0).

*-Y* INT::
    Specifies the upper bound of the raster scan for the Y axis(0-479, default 0).

*-z* INT::
    Specifies the lower depth limit in millimetres that should be scanned(0-9999, default 340).

*-Z* INT::
    Specifies the upper depth limit in millimetres that should be scanned(0-9999, default 340).


*The following options refer to selection criteria for objects after the raster scan has completed*

*-c* INT::
    Specifies the lowest pixel count for an object to pass(0-4000000, default 50).

*-C* INT::
    Specifies the greatest pixel count for an object to pass(0-4000000, default 0, disabled).

*-w* INT::
    Specifies the lowest (width in pixels*Average depth) for an object to pass(0-400000000, default 0, disabled).

*-W* INT::
    Specifies the greatest (width in pixels*Average depth) for an object to pass(0-400000000, default 0, disabled).

*-h* INT::
    Specifies the lowest (height in pixels*Average depth) for an object to pass(0-400000000, default 0, disabled).

*-H* INT::
    Specifies the greatest (height in pixels*Average depth) for an object to pass(0-400000000, default 0, disabled).

*-f* INT::
    Specifies the lowest depth difference(fatness) in mm for an object to pass(0-9999, default 340).

*-F* INT::
    Specifies the greatest depth difference(fatness) in mm for an object to pass(0-9999, default 0, disabled).

*-d* INT::
    Specifies the lowest depth average in mm for an object to pass(0-9999, default 0, disabled).

*-D* INT::
    Specifies the greatest depth average in mm for an object to pass(0-9999, default 0, disabled).

*-t* FLOAT::
    Specifies the lowest proportion (width/height) for an object to pass(0-9999, default 0, disabled).

*-T* FLOAT::
    Specifies the greatest proportion (width/height) for an object to pass(0-9999, default 0, disabled).

*-q* FLOAT::
    Specifies the lowest density (pixel count / width in px*height in px) for an object to pass(0-1, default 0, disabled).

*-Q* FLOAT::
    Specifies the greatest density (pixel count / width in px*height in px) for an object to pass(0-1, default 0, disabled).


==SCRIPTING==

The base script is http://www.intrael.com/scripts/intrael.js and should be included in your page's head. You can see how it's used on  http://www.intrael.com/test which is a testing facility for the server's output. 

You can pass a "server" property to the *options* object to redefine the server host and an "errorhandler" function to catch connection errors.

To actually use the server data you must provide a processing function as the value of the property "inputhandler" param in the *options*
object you pass on Intrael.init(). That function takes one argument described below. You then call Intrael.fetch() and the polling begins.


==PROTOCOL==

The server responses are numeric arrays wrapped in HTTP headers and an *Intrael.p([...])* method for the JS glue.
The format consists of a header with 32 elements along with several 32-element packs that describe distinct objects.
The header format is(single letter identifiers refer to option values set via the command line or management console):

*(frame count since startup), (timestamp), (identifier), K, O, m, x, X, y, Y, z, Z, w, W, h, H, f,F,d, D, t, T, c, C, q, Q,
(accelerometer_x), (accelerometer_y), (accelerometer_z), (current angle), (current motor state), (total objects found)*

The motor state values correspond to the following three states. *0-Stopped, 1-Reached limits, 4-Moving*.

Each of the following 32-element packs begin with seven 4-element subpacks describing the extrema pairs of 
the X, Y, Z axes (lower first) and the center of mass. Each of these point seven subpacks has the format
*<X coord>, <Y coord>, <Point depth in mm>, <Depth of the corresponding point on the reference frame in mm>*.
The 29th element is the object's average depth, 30th is the object's pixel count, 31st is the number of runs 
that comprise this object and the 32nd is the irregularity of the object(THE LAST TWO NEED CLARIFICATION)


==MANAGEMENT INTERFACE==

You can enable the management console by setting the *-P* option to a non-zero value. By doing that you'll
be able to connect to a simple TCP/IP server on the specified port. Sending a "\n" will return the same data
as the HTTP listener, without the HTTP headers and JSON-P glue. In addition you'll get one more element, the
first in each response, which is the connection ID of your connection. To be able to make live config changes
you must take the secret(specified on the command line with the *-s/-S* options) along with the (connection ID),
(frame count) and (timestamp) from the first response after connecting (*WARNING: The numbers on responses after
the first are irrelevant*), join them with commas, MD5 them and use the hash as the first argument of your request.
All the subbsequent, space-separated, arguments will be parsed similarly to the command line options. For example,
if the values are *MY_Secr3t,13,123673,33435353423*  you can send a *765bb7a303dee57932de74a39465aec8 z400 Z750 r1\n*
to set the lower and upper depth thresholds respectively. The option arguments must be inseparable from the option
letter. The *m,x,X,y,Y,z,Z* options will force a new reference frame to be taken and the threshold maps recalculated.
The response you'll get right after live changes will probably don't have the new config. The next be ok though.

*WARNING: THE MANAGEMENT INTERFACE DOES NOT GUARANTEE THE APPLICATION OF CHANGES FROM MULTIPLE CONCURRENT MANAGERS*


==AUTHOR==

Intrael was written by Yannis Gravezas wizgrav@intrael.com


==RESOURCES==

Main web site: http://www.intrael.com

Google code page: http://code.google.com/p/intrael

Facebook page : http://www.facebook.com/pages/Intrael/176569789065377


==COPYING==

This file is part of the Intrael Project. http://www.intrael.com

Copyright (c) 2011 Yannis Gravezas. wizgrav At intrael.com

This code is licensed to you under the terms of the GNU General Public License,
version 3.0. See the GPL3 files for the text of the license,
or visit http://www.gnu.org/licenses/gpl-3.0.txt

If you redistribute this file in source form, modified or unmodified, you
must keep the copyright notice intact and include

Binary distributions must follow the binary distribution requirements of
the GPL3 License.